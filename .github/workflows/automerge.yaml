name: "Automerge"

"on":
  pull_request:
    types:
      - opened
    paths:
      - good/*
      - good/**

# permissions:
#   contents: read
#   packages: read

jobs:
  automerge:
    runs-on: ubuntu-20.04
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      automerge:
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          persist-credentials: false

      - name: Report diff
        run: gh pr diff --name-only ${{ github.event.number }}

      - name: Report labels
        run: gh api repos/amarao/debug/pulls/${{ github.event.number }} --jq '.labels.[].name'

      - name: Report author
        run: gh pr view ${{ github.event.number }} --json user.login --jq '.user.login'

      - name: Validate changes scope
        run: |
          import subprocess
          import os
          import sys

          cmd = "gh pr diff --name-only ${{ github.event.number }}"
          files = subprocess.check_output(cmd, shell=True)

          content_good = False
          label_good = False
          author_good = False

          for name in files.decode("utf-8").splitlines():
            if not name.startswith("good/"):
              print(f"Found {name}. Automerge is not possible")
              break
          else:
            print("Content OK")
            content_good = True

          cmd = "gh api repos/amarao/debug/pulls/${{ github.event.number }} --jq '.labels.[].name'"
          labels = subprocess.check_output(cmd, shell=True)
          if "automerge" in labels.decode('UTF-8'):
            print("Label OK")
            label_good = True
          else:
            print("Can't find automerge in labels")
            label_good = False


          cmd = "gh pr view ${{ github.event.number }} --json user.login --jq '.user.login'"
          author = subprocess.check_output(cmd, shell=True)

          if author.decode('utf-8') == 'mrpulin':
            print("PR Author is good")
            author_good = True
          else:
            print("PR Author is wrong")
            author_good = False

          with open(os.environ["GITHUB_OUTPUT"], "w") as f:
                if content_good:
                  f.write("content=good\n")
                else:
                  f.write("content=bad\n")
                if label_good:
                  f.write("label=good\n")
                else:
                  f.write("label=bad\n")
                if author_good:
                  f.write("author=good\n")
                else:
                  f.write("author=bad\n")
        shell: python {0}
        id: check

      - name: Merge
        if: "${{ steps.check.outputs.content == 'good' &&  steps.check.outputs.label == 'good' && steps.check.outputs.author == 'good'}}"
        run: |
          gh pr merge ${{ github.event.number }} --auto -d --merge
          gh pr comment ${{ github.event.number }} --body "This PR was automerged."

      - name: Refuse to merge because of the content
        if: "${{ steps.check.outputs.content != 'good' }}"
        run: gh pr comment ${{ github.event.number }} --body "This PR can not be merged automatically, as it contains non-trivial changes"

      - name: Refuse to merge because of the content
        if: "${{ steps.check.outputs.label != 'good' }}"
        run: gh pr comment ${{ github.event.number }} --body "This PR did not have 'automerge' label at the moment of creation, so I won't merge it."

      - name: Refuse to merge because of the author
        if: "${{ steps.check.outputs.author != 'good' }}"
        run: gh pr comment ${{ github.event.number }} --body "This PR wasn't authored by MrPulin, so I don't automerge it."
